#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

druid.extensions.loadList={{druid_extensions | safe}}

#
# Hostname
#
druid.host={{host_name}}

#
# TLS Config
#
druid.enablePlaintextPort=false
druid.enableTlsPort=true
druid.server.https.keyStoreType=jks
druid.server.https.keyStorePath=/home/druid-cluster/apache-druid/tls-certificates/keystore.jks
druid.server.https.keyStorePassword={"type": "environment", "variable": "TLS_KEYSTORE_PASSWORD"}
druid.server.https.certAlias=druid
druid.server.https.reloadSslContext=true
druid.server.https.reloadSslContextSeconds=60

druid.client.https.protocol=TLSv1.2
druid.client.https.trustStoreType=jks
druid.client.https.trustStorePath=/home/druid-cluster/apache-druid/tls-certificates/truststore.jks
druid.client.https.trustStorePassword={"type": "environment", "variable": "TLS_KEYSTORE_PASSWORD"}
#
# Logging
#

# Log all runtime properties on startup. Disable to avoid logging properties on startup:
druid.startup.logging.logProperties=true

#
# Zookeeper
#

druid.zk.service.host={{zookeeper_ips}}
druid.zk.paths.base=/druid
druid.zk.service.sessionTimeoutMs=3600000
druid.zk.service.connectionTimeoutMs=3600000

#
# Metadata storage
#
druid.metadata.storage.type=postgresql
druid.metadata.storage.connector.connectURI=jdbc:postgresql://{{rds_endpoint}}:{{rds_port}}/{{database_name}}
druid.metadata.storage.connector.user={{rds_username}}
druid.metadata.storage.connector.password={"type": "environment", "variable": "METADATA_STORAGE_PASSWORD"}
druid.metadata.postgres.ssl.useSSL=true
druid.metadata.postgres.ssl.sslRootCert=/home/druid-cluster/rds-ca-certs/rds-bundle.pem
druid.metadata.postgres.ssl.sslMode=verify-full

#
# Deep storage
#
druid.storage.type=s3
druid.storage.bucket={{data_bucket}}
druid.storage.disableAcl=true
{% if data_bucket_key_id %}
druid.storage.sse.type=kms
druid.storage.sse.kms.keyId={{data_bucket_key_id}}
{% else %}
druid.storage.sse.type=s3
{% endif %}
druid.storage.baseKey={{data_bucket_prefix}}

#
# Indexing service logs
#
druid.indexer.logs.type=file
druid.indexer.logs.directory=log/indexer

#
# Service discovery
#
druid.selectors.indexing.serviceName=druid/overlord
druid.selectors.coordinator.serviceName=druid/coordinator

#
# Monitoring
#
druid.emitter.logging.logLevel=INFO
druid.emitter.cloudwatch.clusterName={{cluster_name}}
druid.emitter.cloudwatch.solutionVersion={{solution_version | safe}}

{% if emitter_config.emitterType == 'cloudwatch' %}
druid.emitter=cloudwatch
{% elif emitter_config.emitterType == 'statsd' %}
druid.emitter=composing
druid.emitter.composing.emitters=["cloudwatch", "statsd"]
druid.emitter.statsd.hostname={{emitter_config.emitterConfig.hostname | safe}}
druid.emitter.statsd.port={{emitter_config.emitterConfig.port}}
druid.emitter.statsd.dogstatsd=true
druid.emitter.statsd.includeHost=true
druid.emitter.statsd.dogstatsdConstantTags={{emitter_config.emitterConfig.dogstatsdConstantTags | tojson | safe}}
druid.emitter.statsd.dimensionMapPath=/home/druid-cluster/apache-druid/solution_config/statsd/metricDimensions.json
{% endif %}

# Storage type of double columns
# ommiting this will lead to index double as float at the storage layer
druid.indexing.doubleStorage=double

#
# Security
#
druid.server.hiddenProperties=["druid.metadata.storage.connector.password", "druid.auth.authenticator.basic.initialAdminPassword", "druid.auth.authenticator.basic.initialInternalClientPassword", "druid.auth.oidc.druidPassword", "druid.escalator.internalClientPassword", "druid.auth.oidc.clientSecret", "druid.server.https.keyStorePassword", "druid.client.https.trustStorePassword"]
druid.server.http.enableForwardedRequestCustomizer=true

#
# SQL
#
druid.sql.enable=true

#
# Authentication and authrorisation
#
{% if oidc_client_id %}
druid.auth.authenticatorChain=["basic", "jwt", "oidc"]
{% else %}
druid.auth.authenticatorChain=["basic"]
{% endif %}
druid.auth.authenticator.basic.type=basic
druid.auth.authenticator.basic.initialAdminPassword={"type": "environment", "variable": "DRUID_ADMIN_PASSWORD"}
druid.auth.authenticator.basic.initialInternalClientPassword={"type": "environment", "variable": "DRUID_INTERNAL_CLIENT_PASSWORD"}
druid.auth.authenticator.basic.credentialsValidator.type=metadata
druid.auth.authenticator.basic.skipOnFailure=false
druid.auth.authenticator.basic.authorizerName=basic

{% if oidc_client_id  %}
druid.auth.authenticator.oidc.type=oidc
druid.auth.oidc.cookiePassphrase={"type": "environment", "variable": "COOKIE_PASS_PHRASE"}
druid.auth.oidc.enableCustomSslContext=false
druid.auth.oidc.clientID={{oidc_client_id}}
druid.auth.oidc.clientSecret={"type": "environment", "variable": "OIDC_CLIENT_SECRET"}
druid.auth.oidc.discoveryURI={{oidc_discovery_uri}}
druid.auth.oidc.druidBaseUrl={{druid_base_url}}
druid.auth.oidc.druidUsername={{internal_client_username}}
druid.auth.oidc.druidPassword={"type": "environment", "variable": "DRUID_INTERNAL_CLIENT_PASSWORD"}
druid.auth.authenticator.oidc.authorizerName=oidc
druid.auth.authenticator.jwt.type=jwt
druid.auth.authenticator.jwt.authorizerName=oidc

{% endif %}
{% if oidc_group_claim_name  %}
druid.auth.oidc.groupClaimName={{oidc_group_claim_name}}
{% endif %}
{% if oidc_custom_scopes  %}
druid.auth.oidc.customScopes={{oidc_custom_scopes | safe}}
{% endif %}

druid.escalator.type=basic
druid.escalator.internalClientUsername={{internal_client_username}}
druid.escalator.internalClientPassword={"type": "environment", "variable": "DRUID_INTERNAL_CLIENT_PASSWORD"}
druid.escalator.authorizerName=basic

{% if oidc_client_id  %}
druid.auth.authorizers=["basic", "oidc"]
druid.auth.authorizer.oidc.type=oidc
{% else %}
druid.auth.authorizers=["basic"]
{% endif %}

druid.auth.authorizer.basic.type=basic
druid.auth.authorizer.basic.enableCacheNotifications=true
druid.auth.authorizer.basic.roleProvider.type=context
druid.auth.authorizer.basic.initialAdminRole=admin

